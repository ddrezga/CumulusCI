<project default="dev_deploy" basedir="." xmlns:sf="antlib:com.salesforce">
    <!-- Load the package requirements from version.properties -->
    <loadproperties srcFile="${basedir}/version.properties"/>

    <!-- Load environment variables -->
    <property environment="env" />
    
    <!-- Check if the CUMULUSCI_PATH environment variable is set -->
    <fail>
        <condition>
            <not><isset property="env.CUMULUSCI_PATH" /></not>
        </condition>
        CUMULUSCI_PATH is Required!

        This project uses the CumulusCI build scripts which must be checked out and
        referenced in an environment variable before you can run the build scripts.

        To configure the build scripts, do the following:

        1. Clone the CumulusCI GitHub repository to a local folder:
            https://github.com/SalesforceFoundation/CumulusCI

        2. Set the CUMULUSCI_PATH environment variable to the path to CumulusCI

        If you are on a unix based system, the following commands should work:

            git clone https://github.com/SalesforceFoundation/CumulusCI ~/CumulusCI
            export CUMULUSCI_PATH=~/CumulusCI
    </fail>

    <!-- Load CumulusCI build targets -->
    <import file="${env.CUMULUSCI_PATH}/build/build.xml" />

    <!-- Add project specific build targets and CumulusCI overrides here -->

    <!-- ============================================================================ -->
    <!--    CloudSense ant targets                                                    -->
    <!-- ============================================================================ -->

    <!-- Dev org related targets -->

    <!--
        Default deploy :
        Deploy unpackaged code to the dev org.
        The code is deployed from the working directory.
        1. Unpackaged metadata is deployed without running tests.
        2. Destructive changes are deployed by removing extra metadata in the org vs the metadata in the working directory.
        3. Tests are run
    -->
    <target name="dev_deploy" description="Deploy to dev org; with test and destructive changes (default)">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="dev" />
        <!-- Call deployment target for default deploy (deploy unpackaged metadata and run tests afterwards) -->
        <antcall target="deploy" />
        <!-- Call deployment of destructive changes; metadata on the org is compared to the local metadata, destructive changes are generated as a delta and deployed to the Org-->
        <!-- <destructive_deploy srcdir="src" /> -->
    </target>

    <!--
        Quick deploy :
        Deploy unpackaged code to the dev org.
        The code is deployed from the working directory.
        1. Unpackaged metadata is deployed without running tests.
        2. Destructive changes are deployed by removing extra metadata in the org vs the metadata in the working directory.
    -->
    <target name="quick_deploy" description="Quick deploy to dev org; without test, with destructive changes">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Call deployment target for default deploy, no tests are run -->
        <antcall target="deployWithoutTest" />
    </target>

    <target name="check_deploy" description="Verify deploy to dev org; without test">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <echo>${org} - ${sf.username} - ${sf.password} - ${sf.serverurl}</echo>
        <!-- Call deployment target for default deploy, no tests are run -->
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" testLevel="NoTestRun" maxPoll="${cumulusci.maxPoll.notest}" checkOnly="true"/>
    </target>

    <target name="check_test_deploy" description="Verify deploy to dev org; without test">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Call deployment target for default deploy, no tests are run -->
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.notest}" checkOnly="true"/>
    </target>

    <target name="deploy" description="Deploy to dev org; with test and destructive changes (default)">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Call deployment target for default deploy (deploy unpackaged metadata and run tests afterwards) -->
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.notest}" />
    </target>
    <!--
        Get config metadata :
        Get config metadata (without code) from the dev org to the working directory.
        The changes can then be pushed to the code repository (this should be done by the user)
    -->
    <target name="retrieve_config" description="Pull configuration metadata from dev org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <delete dir="${org}_metadata" />
        <mkdir dir="${org}_metadata" />
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            serverurl="${sf.serverurl}"
            retrieveTarget="{org}_config_metadata"
            unpackaged="${cumulus_ci.basedir}/config_meta_types.xml"/>
    </target>

    <target name="retrieve_everything" description="Pull configuration metadata from dev org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <delete dir="${org}_config_metadata" />
        <mkdir dir="${org}_config_metadata" />
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            serverurl="${sf.serverurl}"
            retrieveTarget="${org}_config_metadata"
            unpackaged="${cumulus_ci.basedir}/all_meta_types.xml"/>
    </target>

    <target name="retrieve_all" description="Pull all metadata from dev org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <delete dir="${org}_metadata" />
        <mkdir dir="${org}_metadata" />
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            serverurl="${sf.serverurl}"
            retrieveTarget="${org}_metadata"
            unpackaged="src/package.xml"/>
    </target>

    <target name="list_metadata" description="Pull all metadata from dev org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <sf:listMetadata
            username="${sf.username}"
            password="${sf.password}"
            serverurl="${sf.serverurl}"
            metadataType="${type}"
            resultFilePath="../${type}.log"/>
    </target>

    <target name="create_destructive_changes_package" description="Create destructive changes between src and dest branch">
        <delete dir="../temp" />
        <exec executable="git" failonerror="true">
            <arg line="clone -b ${src} --single-branch .git ../temp/${src}_branch" />
        </exec>
        <exec executable="git" failonerror="true">
            <arg line="clone -b ${dest} --single-branch .git ../temp/${dest}_branch" />
        </exec>
        <!-- <buildPackageXmlFromDir dir="../temp/${src}_branch/src" xmlfile="../temp/${src}_branch/src/package.xml" version="${cumulusci.package.apiVersion}"/> -->
        <!-- <buildPackageXmlFromDir dir="../temp/${dest}_branch/src" xmlfile="../temp/${dest}_branch/src/package.xml" version="${cumulusci.package.apiVersion}"/> -->
        <buildDestroyStaleMetadata srcdir="../temp/${src}_branch/src" commdir="../temp/${dest}_branch/src" dir="../uninstall" />
        <delete dir="../temp" />
        <copy todir="../uninstall" flatten="true">
            <resources>
                <file file="build.properties"/>
                <file file="build.xml"/>
                <file file="cumulusci.properties"/>
                <file file="version.properties"/>
            </resources>
        </copy>
    </target>

    <target name="create_destructive_changes_metadata" description="Create destructive changes between src and dest branch">
        <delete dir="../temp" />
        <exec executable="git" failonerror="true">
            <arg line="clone -b ${src} --single-branch .git ../temp/${src}_branch" />
        </exec>
        <exec executable="git" failonerror="true">
            <arg line="clone -b ${dest} --single-branch .git ../temp/${dest}_branch" />
        </exec>
        <buildPackageXmlFromDir dir="../temp/${src}_branch/src" xmlfile="../temp/${src}_branch/src/package.xml" version="${cumulusci.package.apiVersion}"/>
        <buildPackageXmlFromDir dir="../temp/${dest}_branch/src" xmlfile="../temp/${dest}_branch/src/package.xml" version="${cumulusci.package.apiVersion}"/>
        <buildDestroyStaleMetadata srcdir="../temp/${src}_branch/src" commdir="../temp/${dest}_branch/src" dir="../uninstall" />
        <delete dir="../temp" />
        <copy todir="../uninstall" flatten="true">
            <resources>
                <file file="build.properties"/>
                <file file="build.xml"/>
                <file file="cumulusci.properties"/>
                <file file="version.properties"/>
            </resources>
        </copy>
    </target>

    <target name="create_destructive_changes_org" description="Create destructive changes between src and dest branch">
        <delete dir="../temp" />
        <exec executable="git" failonerror="true">
            <arg line="clone -b ${src} --single-branch .git ../temp/${src}_branch" />
        </exec>
        <updateCredentials org="${org}" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <mkdir dir="../temp/${org}_metadata" />
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            serverurl="${sf.serverurl}"
            retrieveTarget="../temp/${org}_metadata"
            unpackaged="src/package.xml"/>
        <buildPackageXmlFromDir dir="../temp/${src}_branch/src" xmlfile="../temp/${src}_branch/src/package.xml" version="${cumulusci.package.apiVersion}"/>
        <buildPackageXmlFromDir dir="../temp/${org}_metadata/src" xmlfile="../temp/${org}_metadata/src/package.xml" version="${cumulusci.package.apiVersion}"/>
        <buildDestroyStaleMetadata srcdir="../temp/${src}_branch/src" commdir="../temp/${org}_metadata/src" dir="../uninstall" />
        <delete dir="../temp" />
        <copy todir="../uninstall" flatten="true">
            <resources>
                <file file="build.properties"/>
                <file file="build.xml"/>
                <file file="cumulusci.properties"/>
                <file file="version.properties"/>
            </resources>
        </copy>
    </target>

    <target name="destructive_deploy" description="Quick deploy to dev org; without test, with destructive changes">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="${org}" />
        <!-- deploy the destructiveChanges.xml package -->
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="../uninstall" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.test}" purgeOnDelete="true" />
    </target>

    <!--
        Utility targets
    -->

    <!-- ============================================================================ -->
    <!--    Macros and test ant targets                                                          -->
    <!-- ============================================================================ -->

    <!-- Macro to update the credentials for org deployment -->
    <macrodef name="updateCredentials" description="Update SFDC credentials variable for other targets">
        <attribute name="org" description="The name of the environment to deploy to (dev, sit, uat)" />
        <sequential>
            <if>
                <and>
                    <not><isset property="env.SF_USERNAME" /></not>
                    <not><isset property="sf.username" /></not>
                </and>
                <then>
                    <var name="sf.username" value="${@{org}.sf.username}" />
                    <var name="sf.password" value="${@{org}.sf.password}" />
                    <var name="sf.serverurl" value="${@{org}.sf.serverurl}" />
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="upstream_deploy" description="Deploy to upstream orgs (SIT, UAT, PROD)">
        <attribute name="org" description="Org to deploy to" />
        <sequential>
            <!-- Update credentials for connecting to the org -->
            <updateCredentials org="@{org}" />

            <!-- Delete temporary directory for deployment metadata -->
            <delete dir="@{org}_deploy" />

            <!-- Clone git repository and checkout the branch related to the org-->
            <exec executable="git" failonerror="true">
                <arg line="clone ${git.url} @{org}_deploy" />
            </exec>
            <exec executable="git" failonerror="true" dir="@{org}_deploy">
                <arg line="checkout ${@{org}.branch}" />
            </exec>

            <!-- Call predeployment target, deploy the code with running local tests, call post deployment target-->
            <antcall target="preDeploy" />
            <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="@{org}_deploy" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.test}" />
            <antcall target="postDeploy" />

            <echo>----------------------------------------------------------------------------</echo>

            <!-- Call deployment of destructive changes; metadata on the org is compared to the local metadata, destructive changes are generated as a delta and deployed to the Org-->
            <destructive_deploy srcdir="@{org}_deploy" />

            <!-- Delete temporary directory for deployment metadata -->
            <delete dir="@{org}_deploy" />
        </sequential>
    </macrodef>

    <macrodef name="destructive_gen_deploy" description="Generate and deploy destructive changes between a folder and target org">
        <attribute name="srcdir" description="Source directory with destructive changes" />
        <sequential>

            <!-- Delete temporary directories-->
            <delete dir="uninstallsrc" />
            <delete dir="uninstall" />

            <!-- Fetch all metadata in the  package from target org -->
            <sf:retrieve
                username="${sf.username}"
                password="${sf.password}"
                serverurl="${sf.serverurl}"
                retrieveTarget="uninstallsrc"
                unpackaged="${cumulus_ci.basedir}/all_meta_types.xml"/>

            <!-- Generate the package.xml from the directory contents -->
            <buildPackageXmlFromDir dir="uninstallsrc" xmlfile="package.xml" version="${cumulusci.package.apiVersion}"/>
            <!-- Build a destructiveChanges.xml pacckage to delete metadata in org but not in repo -->
            <buildDestroyStaleMetadata srcdir="uninstallsrc" commdir="@{srcdir}" dir="uninstall" />

            <!-- deploy the destructiveChanges.xml package -->
            <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.test}" purgeOnDelete="true" />

            <!-- Delete temporary directories-->
            <delete dir="uninstallsrc" />
            <delete dir="uninstall" />

        </sequential>
    </macrodef>

</project>

<project default="dev_deploy" basedir="." xmlns:sf="antlib:com.salesforce">
    <!-- Load the package requirements from version.properties -->
    <loadproperties srcFile="${basedir}/version.properties"/>

    <!-- Load environment variables -->
    <property environment="env" />

    <!-- Check if the CUMULUSCI_PATH environment variable is set -->
    <fail>
        <condition>
            <not><isset property="env.CUMULUSCI_PATH" /></not>
        </condition>
        CUMULUSCI_PATH is Required!

        This project uses the CumulusCI build scripts which must be checked out and 
        referenced in an environment variable before you can run the build scripts.

        To configure the build scripts, do the following:

        1. Clone the CumulusCI GitHub repository to a local folder: 
            https://github.com/SalesforceFoundation/CumulusCI

        2. Set the CUMULUSCI_PATH environment variable to the path to CumulusCI

        If you are on a unix based system, the following commands should work:

            git clone https://github.com/SalesforceFoundation/CumulusCI ~/CumulusCI
            export CUMULUSCI_PATH=~/CumulusCI
    </fail>
    
    <!-- Load CumulusCI build targets -->
    <import file="${env.CUMULUSCI_PATH}/build/build.xml" />

    <!-- Add project specific build targets and CumulusCI overrides here -->

    <!-- ============================================================================ -->
    <!--    CloudSense ant targets                                                    -->
    <!-- ============================================================================ -->

    <!-- Dev org related targets -->

    <!--
        Default deploy :
        Deploy unpackaged code to the dev org.
        The code is deployed from the working directory.
        1. Unpackaged metadata is deployed without running tests.
        2. Destructive changes are deployed by removing extra metadata in the org vs the metadata in the working directory.
        3. Tests are run
    -->
    <target name="dev_deploy" description="Deploy to dev org; with test and destructive changes (default)">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="dev" />
        <!-- Call deployment target for default deploy (deploy unpackaged metadata and run tests afterwards) -->
        <antcall target="deploy" />
        <!-- Call deployment of destructive changes; metadata on the org is compared to the local metadata, destructive changes are generated as a delta and deployed to the Org-->
        <destructive_deploy srcdir="src" />
    </target>

    <!--
        Quick deploy :
        Deploy unpackaged code to the dev org.
        The code is deployed from the working directory.
        1. Unpackaged metadata is deployed without running tests.
        2. Destructive changes are deployed by removing extra metadata in the org vs the metadata in the working directory.
    -->
    <target name="dev_quick_deploy" description="Quick deploy to dev org; without test, with destructive changes">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="dev" />
        <!-- Call deployment target for default deploy, no tests are run -->
        <antcall target="deployWithoutTest" />
        <!-- Call deployment of destructive changes; metadata on the org is compared to the local metadata, destructive changes are generated as a delta and deployed to the Org-->
        <destructive_deploy srcdir="src" />
    </target>

    <!--
        Get config metadata :
        Get config metadata (without code) from the dev org to the working directory.
        The changes can then be pushed to the code repository (this should be done by the user)
    -->
    <target name="dev_retrieve_config" description="Pull configuration metadata from dev org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="dev" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <sf:retrieve 
            username="${sf.username}" 
            password="${sf.password}" 
            serverurl="${sf.serverurl}" 
            retrieveTarget="src" 
            unpackaged="${cumulus_ci.basedir}/config_meta_types.xml"/>
    </target>

    <!-- SIT and UAT related targets -->

    <!--
        Deploy to SIT
        This target clones the repository from git and deploys the unpackaged code to the SIT org.
        Please note that the deployed code is NOT from the working directory
        It also deletes extra metadata in the SIT org that does not exist in the SIT related branch in the code repository.
    -->
    <target name="sit_deploy" description="Deploy to SIT by pulling SIT branch, and deploying with tests and destructive changes">
        <upstream_deploy org="sit" />
    </target>

    <!--
        Retrieve SIT metadata
        This target retrieves SIT metadata into the working directory.
        Usecase for this target is when you've created small changes directly in the SIT org to introduce them to your working directory, so that it can be (re)introduced to code repository through standard process/lifecycle.
    -->
    <target name="sit_retrieve_config" description="Pull configuration metadata from SIT org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="sit" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <sf:retrieve 
            username="${sf.username}" 
            password="${sf.password}" 
            serverurl="${sf.serverurl}" 
            retrieveTarget="src" 
            unpackaged="${cumulus_ci.basedir}/config_meta_types.xml"/>
    </target>

    <!--
        Deploy to UAT
        This target clones the repository from git and deploys the unpackaged code to the UAT org.
        Please note that the deployed code is NOT from the working directory
        It also deletes extra metadata in the UAT org that does not exist in the UAT related branch in the code repository.
    -->
    <target name="uat_deploy" description="Deploy to UAT by pulling UAT branch, and deploying with tests and destructive changes">
        <upstream_deploy org="uat" />
    </target>

    <!--
        Retrieve SIT metadata
        This target retrieves SIT metadata into the working directory.
        Usecase for this target is when you've created small changes directly in the SIT org to introduce them to your working directory, so that it can be (re)introduced to code repository through standard process/lifecycle.
    -->
    <target name="uat_retrieve_config" description="Pull configuration metadata from UAT org to working directory">
        <!-- Update credentials for connecting to the org -->
        <updateCredentials org="uat" />
        <!-- Retrieve unpackaged config metadata to the local directory (no "code" is retrieved) -->
        <sf:retrieve 
            username="${sf.username}" 
            password="${sf.password}" 
            serverurl="${sf.serverurl}" 
            retrieveTarget="src" 
            unpackaged="${cumulus_ci.basedir}/config_meta_types.xml"/>
    </target>

    <!--
        Deploy to PROD
        This target clones the repository from git and deploys the unpackaged code to the UAT org.
        Please note that the deployed code is NOT from the working directory
        It also deletes extra metadata in the PROD org that does not exist in the PROD related branch in the code repository.
    -->
    <target name="prod_deploy" description="Deploy to PROD by pulling PROD branch, and deploying with tests and destructive changes">
        <input>This will start deployment to production!!! If this was not your intention, kill the process NOW!!!</input>
        <upstream_deploy org="prod" />
    </target>

    <!--
        Utility targets
    -->

    <!-- ============================================================================ -->
    <!--    Macros and test ant targets                                                          -->
    <!-- ============================================================================ -->

    <!-- Macro to update the credentials for org deployment -->
    <macrodef name="updateCredentials" description="Update SFDC credentials variable for other targets">
        <attribute name="org" description="The name of the environment to deploy to (dev, sit, uat)" />
        <sequential>
            <if>
                <and>
                    <not><isset property="env.SF_USERNAME" /></not>
                    <not><isset property="sf.username" /></not>
                </and>
                <then>
                    <var name="sf.username" value="${@{org}.sf.username}" />
                    <var name="sf.password" value="${@{org}.sf.password}" />
                    <var name="sf.serverurl" value="${@{org}.sf.serverurl}" />
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="upstream_deploy" description="Deploy to upstream orgs (SIT, UAT, PROD)">
        <attribute name="org" description="Org to deploy to" />
        <sequential>
            <!-- Update credentials for connecting to the org -->
            <updateCredentials org="@{org}" />

            <!-- Delete temporary directory for deployment metadata -->
            <delete dir="@{org}_deploy" />

            <!-- Clone git repository and checkout the branch related to the org-->
            <exec executable="git" failonerror="true">
                <arg line="clone ${git.url} @{org}_deploy" />
            </exec>
            <exec executable="git" failonerror="true" dir="@{org}_deploy">
                <arg line="checkout ${@{org}.branch}" />
            </exec>

            <!-- Call predeployment target, deploy the code with running local tests, call post deployment target-->
            <antcall target="preDeploy" />
            <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="@{org}_deploy" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.test}" />
            <antcall target="postDeploy" />

            <echo>----------------------------------------------------------------------------</echo>

            <!-- Call deployment of destructive changes; metadata on the org is compared to the local metadata, destructive changes are generated as a delta and deployed to the Org-->
            <destructive_deploy srcdir="@{org}_deploy" />

            <!-- Delete temporary directory for deployment metadata -->
            <delete dir="@{org}_deploy" />
        </sequential>
    </macrodef>

    <macrodef name="destructive_deploy" description="Generate and deploy destructiv changes between a folder and target org">
        <attribute name="srcdir" description="Source directory with destructive changes" />        
        <sequential>

            <!-- Delete temporary directories-->
            <delete dir="uninstallsrc" />
            <delete dir="uninstall" />

            <!-- Fetch all metadata in the  package from target org -->
            <sf:retrieve 
                username="${sf.username}" 
                password="${sf.password}" 
                serverurl="${sf.serverurl}" 
                retrieveTarget="uninstallsrc" 
                unpackaged="${cumulus_ci.basedir}/all_meta_types.xml"/>

            <!-- Generate the package.xml from the directory contents -->
            <buildPackageXmlFromDir dir="uninstallsrc" xmlfile="package.xml" />
            <!-- Build a destructiveChanges.xml pacckage to delete metadata in org but not in repo -->
            <buildDestroyStaleMetadata srcdir="uninstallsrc" commdir="@{srcdir}" dir="uninstall" />

            <!-- deploy the destructiveChanges.xml package -->
            <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall" testLevel="RunLocalTests" maxPoll="${cumulusci.maxPoll.test}" purgeOnDelete="true" />

            <!-- Delete temporary directories-->
            <delete dir="uninstallsrc" />
            <delete dir="uninstall" />

        </sequential>
    </macrodef>

</project>
